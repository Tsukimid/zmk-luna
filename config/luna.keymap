/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layer definitions
#define LUNA 0
#define NUMS 1
#define FUNC 2
#define NAVI 3
#define VNAV 4
#define SHRT 5
#define SNUM 6
#define MCTL 7
#define SYMS 8
// -----------------
&sl {
    release-after-ms = <1750>;
};

/ {
    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1750>;
            quick-release;
        };

        pdcol: period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };

        cmscl: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        bht: balanced_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <10>;
            flavor = "balanced";
            bindings = <&sl>, <&kp>;
        };
    };

   combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, MS) \
          combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            timeout-ms = <MS>; \
        };

        // BSPC, ENTER, CAPS
        COMBO(bspc, &kp BSPC, 6 7, 0 1, 30)
        COMBO(cbspc, &kp LC(BSPC), 6 7 8, 0 1, 30)
        COMBO(ctrlw, &kp LC(W), 6 7 8 9, 0 1, 30)
        COMBO(enter, &kp ENTER, 23 24 25, 0 1, 30)
        COMBO(caps, &kp CAPS, 14 15, 0, 30)
        COMBO(capsword, &caps_word, 3 6, 0, 30)

        // SHORTCUTS
        COMBO(zhis, &kp LC(R), 11 27, 0, 10)

        // BRACKETS
        COMBO(rangle, &kp GT, 5 15, 0, 50)
        COMBO(langle, &kp LT, 4 14, 0, 50)
        COMBO(rround, &kp RPAR, 6 16, 0, 50)
        COMBO(lround, &kp LPAR, 3 13, 0, 50)
        COMBO(rcurve, &kp RBRC, 7 17, 0, 50)
        COMBO(lcurve, &kp LBRC, 2 12, 0, 50)
        COMBO(rsquare, &kp RBKT, 8 18, 0, 50)
        COMBO(lsquare, &kp LBKT, 1 11, 0, 50)

        // ALPHAS
        COMBO(z, &kp Z, 0 10, 0, 50)
        COMBO(v, &kp V, 13 22, 0, 50)
        COMBO(q, &kp Q, 16 23, 0, 50)
        COMBO(dot, &pdcol, 9 19, 0 1, 50)
    };

    macros {
        lmao: lmao {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                =  <&macro_tap &kp L &kp M &kp A &kp O>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        luna_layer {
            label = "base layer";
            bindings = <
                &kp F &kp P     &kp D &kp W &kp Y                &kp M &kp J       &kp O       &kp U    &cmscl 
                &kp S &kp N     &kp T &kp C &key_repeat          &kp X &kp H       &kp A       &kp E    &kp I
                      &bht SHRT B &kp K &kp G                           &kp L       &key_repeat &sl SYMS
                        &none  &bht NUMS R                                &bht NAVI SPACE &none 
            >;
        };       
                 
        nums_layer {
            label = "numbers and modifiers";
            bindings = <
                &none       &kp TAB   &sk LALT  &kp DEL &kp LG(P)	    &none &kp N7 &kp N8 &kp N9 &cmscl
                &skq LSHIFT &sk LCTRL &sk LGUI  &kp ESC &kp LG(Q)	    &none &kp N4 &kp N5 &kp N6 &skq LSHIFT
                            &kp LC(X) &kp LC(C) &kp LC(V) 	    	          &kp N1 &kp N2 &kp N3
                              &none &trans                                      &bht FUNC N0 &none  
            >;
        };
                 
        func_layer {
            label = "function keys";
            bindings = <
                &none  &none  &none  &none    &none	      &kp F12 &kp F7 &kp F8 &kp F9 &kp F11
                &trans &trans &trans &sk LALT &none	      &none   &kp F4 &kp F5 &kp F6 &kp F10
                       &none  &none  &none 	    	              &kp F1 &kp F2 &kp F3
                         &none  &trans                              &trans &none  
            >;
        };

        navi_layer {
            label = "navigation keys";
            bindings = <
                &none      &none      &none     &none    &none	    &kp HOME  &kp END   &kp PG_UP  &kp PG_DN  &none
                &kp LSHIFT &kp LCTRL  &kp LGUI  &kp LALT &none	    &kp LG(V) &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
                           &none      &none     &none 	       	              &none     &none      &none
                             &none  &sl VNAV                                    &trans &none  
            >;
        };   

        vnav_layer {
            label = "navigation keys for vim navigation";
            bindings = <
                &none      &none        &none        &none    &none	    &none &none   &none   &none    &none
                &kp LSHIFT &kp LCTRL    &kp LGUI     &kp LALT &none	    &none &kp H   &kp J   &kp K    &kp L
                           &none        &none        &none 	       	          &none   &none   &none
                            &none  &none                                        &trans &none  
            >;
        };  
                
        shrt_layer {
            label = "shortcut keys";
            bindings = <
                &none         &none &none           &none       &kp LC(Y)	    &kp LA(COMMA) &kp LA(DOT)       &kp LA(LC(PG_UP)) &kp LA(LC(PG_DN)) &none
                &kp LS(LG(S)) &none &kp LC(N6)      &kp LG(TAB) &kp LC(Z)	    &kp LA(LS(R)) &kp LA(LC(LEFT))  &kp LA(LC(UP))    &kp LA(LC(DOWN))  &kp LA(LC(RIGHT)) 
                              &none &kp LS(LC(TAB)) &kp LC(TAB) 	    	                  &kp LA(LC(SPACE)) &kp LA(LC(H))     &kp LA(LC(L))
                                &none  &sl SNUM                                                 &sl MCTL &none
            >;
        };  
        
        snum_layer {
            label = "number shortcuts for sideberry";
            bindings = <
                &none &none &none &none &none	    &none &kp LA(LC(N4)) &kp LA(LC(N5)) &kp LA(LC(N6)) &none
                &none &none &none &none &none	    &none &kp LA(LC(N1)) &kp LA(LC(N2)) &kp LA(LC(N3)) &none
                      &none &none &none 	    	      &kp LA(LC(N7)) &kp LA(LC(N8)) &kp LA(LC(N9))
                        &none  &trans                       &kp LA(LC(N0)) &none  
            >;
        };      

        mctl_layer {
            label = "screen/media functions";
            bindings = <
                &none &none &none &none &none	    &none &kp C_MUTE   &kp C_VOL_UP &kp C_VOL_DN &none
                &none &none &none &none &none	    &none &kp C_PP     &kp C_NEXT   &kp C_PREV   &none
                      &none &none &none 	    	      &none        &kp C_BRI_UP &kp C_BRI_DN
                        &none  &trans                       &none &none  
            >;
        };  

        syms_layer {
            label = "symbols layer";
            bindings = <
                &kp HASH &kp UNDER &kp EQUAL &kp AT  &kp STAR	    &kp AMPS &kp EXCL  &none    &none &none
                &kp FSLH &kp MINUS &kp GRAVE &kp SQT &kp CARET 	    &kp PLUS &kp QMARK &kp DQT  &none &lmao
                         &kp DLLR  &kp PIPE  &kp TILDE	    	             &kp PRCNT &kp BSLH &none
                           &none  &trans                                       &trans &none  
            >;
        };

    };
};
